---------------------------------------------------------
Steps to manually Debug a C++ Program and Print Variables
---------------------------------------------------------
1) 

g++ -g3 main.cpp -I /home/lindorfer/boost_1_55_0 -std=c++1y

2)

gdb -q a.out

3)

break 71 ### Line number

4) 

run

5)

p a

p test

6)

Quit

-----------------------------------------
Steps to Register Pretty-Printers for GDB
-----------------------------------------
0) download mod. printers for phyton 3 from https://github.com/mateidavid/Boost-Pretty-Printer
1) Copy Printers in any Sub-Directory into /home/lindorfer/gdb_printers/python/SubDirectory
2) Make a __init__.py file in that Sub-Directory (e.g. boost)
3) Edit the .gdbinit
e.g.

python
import sys 
#set path to the parentdirectory
sys.path.insert(0, '/home/lindorfer/gdb_printers/python')

#import modules
from libstdcxx.v6.printers import register_libstdcxx_printers
import boost.latest ### see note on Entry Points below

#register printers
register_libstdcxx_printers (None)
boost.register_printers()
end

------------------------------------------------------
Write own Printer in Boost-Pretty-Printer's printer.py
------------------------------------------------------

##################################################
# boost::vector                     #
##################################################

#This is taken from the boost::container::flat_set of Ruediger's Boost Pretty-Print

@add_printer
class BoostUblasVector:
    "Pretty Printer for boost::ublas::vector (Boost.Numeric)"
    printer_name = 'boost::numeric::ublas::vector'
    version = '1.55'
    template_name = 'boost::numeric::ublas::vector'

    class Iterator:
        def __init__(self, pointer, size):
            self.pointer = pointer
            self.size = size
            self.count = 0

        def __iter__(self):
            return self

        def __next__(self):
            if self.count == self.size:
                raise StopIteration
            count = self.count
            elt = self.pointer.dereference()
            self.pointer = self.pointer + 1
            self.count = self.count + 1
            return ('[%d]' % count, elt)

        def next(self):
            return self.__next__()

    def __init__(self, value):
        self.val = value
        self.element_type = self.val.type.strip_typedefs().template_argument(0)

	#Define the pointers within the vector class from vector.hpp
	#I found this by using Eclipse and analyzing the structure in the debugger	
	
    def get_pointer(self):
        return self.val["data_"]["data_"]

    def get_size(self):
        return self.val["data_"]["size_"]

    def get_capacity(self):
        return self.val["data_"]["size_"]

    def has_elements(self):
        if self.get_pointer():
            return True
        else:
            return False

    def to_string (self):
        if (self.has_elements()):
            return "boost::ublas::vector<%s> with %d elements, capacity %d" % (
                self.element_type, self.get_size(), self.get_capacity())
        else:
            return "empty boost::ublas::vector<%s>" % (self.element_type)

	#This part supposedly prints out the content	

    def children (self):
        return self.Iterator(self.get_pointer(), self.get_size())

    def display_hint(self):
        return 'array'



